////////////////////Defining Study Area////////////////////
var roi = roi.filter(ee.Filter.inList('Nomencl', ['SC-20-V-D'])); // pampa:SH-21-X-D, acre: SC-20-V-D, bahia SD-23-V-D  
Map.centerObject(roi, 10)   

////////////////////Mapping vegetation suppression between 1995 and 2000////////////////////
//selecting the 1995 mapbiomas land use classification
var image_t = ee.Image('projects/mapbiomas-workspace/public/collection8/mapbiomas_collection80_integration_v1')
                   .clip(roi) 
                   .select('classification_1995'); 

// creating a list of land use classes from the classification
var fromList = [0 ,3, 4, 5, 6, 49, 11, 12, 50, 32, 29, 13, 15, 18, 19, 39, 20, 40, 62, 41, 36, 46, 47, 35, 48, 9, 21, 23, 24, 30, 25, 33, 31, 27]; 

// A corresponding list of replacement values 
var toList =  [100, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]; 

// performs the reclassification
var t_remap = image_t.remap({
  from: fromList,
  to: toList,
  bandName: 'classification_1995'
}); 
var t_remap_ = t_remap.selfMask() 

//selecting the 1995 mapbiomas vegetation class
var veg_class_t =  t_remap.eq(1)
var veg_class_t_ =  t_remap.mask(t_remap.eq(1))
//Map.addLayer(veg_class, null, 'veg_class_95') 

//selecting the 2000 mapbiomas land use classification
var image_t1 = ee.Image('projects/mapbiomas-workspace/public/collection8/mapbiomas_collection80_integration_v1')
                   .clip(roi) 
                   .select('classification_2000'); 

// performs the reclassification
var land_use_t1 = image_t1.remap({
  from: fromList,
  to: toList,
  bandName: 'classification_2000'
}); 

var t_remap_1 = land_use_t1.selfMask() 

//selecting the 2000 mapbiomas veg class
var veg_class_t1 =  land_use_t1.eq(1)
var veg_class_t1_ =  land_use_t1.mask(land_use_t1.eq(1))

//calculating the natural vegetation class in 1995
var count = veg_class_t_.reduceRegion({
  reducer: ee.Reducer.count(),
  scale: 30,
  crs: 'EPSG:4326',
  geometry: roi,
  maxPixels: 1e9
}); 

print(count, 'vegetation class in 1995') 

//selecting the 2000 mapbiomas no vegetation class
var no_veg_class_t1 = land_use_t1.eq(2)
//Map.addLayer(anthropic_uses_class, null, 'anthropic_uses_class') 

//sum the 1995 vegetention image with the 2000 anthropic image
var sum_img = veg_class_t.multiply(no_veg_class_t1)
//Map.addLayer(sum_img) 

//selecting the pixels that intersect in the two image
var deforestation_95_00 = sum_img.mask(sum_img.eq(1))
//Map.addLayer(deforestation_95_00) 

var def_00 = deforestation_95_00.updateMask(veg_class_t1)

//export the 1995 to 2000 vegetation supression image to google drive
Export.image.toDrive({
  image: def_00, 
  description:'def_00',
  folder:'TOC_curve', 
  region :roi, 
  scale:30, 
  crs:'EPSG:4326', 
  maxPixels:1e13
}) 

//calculating the 1995 to 2000 vegetation supression area
var count = deforestation_95_00.reduceRegion({
  reducer: ee.Reducer.count(),
  scale: 30,
  crs: 'EPSG:4326',
  geometry: roi,
  maxPixels: 1e9
}); 

print(count, 'vegetation supression 1995 to 2000') 

////////////////////creating a surface with random values////////////////////
var random =  ee.Image.random().clip(roi).multiply(veg_class_t1).reproject('EPSG:4326', null, 30)
Map.addLayer(random) 

//////////////////////selecting the amount of change expected for the future////////////////////
//the amount of vegetation suppression predicted for the future is defined by cutting the susceptibility
//surface by the highest values.
//the formula used to calculate the quantity of changes is: VSx =(VCt1 - VCt0/ Vt0)* 100/ Vtx 
//where future vegetation suppression (VSx) is calculated from the total area suppressed in the 
//training period (VCt1 - VCt0), divided by the total area of vegetation in t0 (1995), multiplied 
//by 1% of the area of vegetation in the period before the one to be extrapolated. For example, if 
//the model was trained between 1995 and 2000 and it was identified that vegetation suppression in 
//this period corresponded to 1% of the vegetation existing in 1995, 1% of the vegetation area existing 
//in 2000 was used to define the amount of change estimated for 2005. For 2010, 1% of the vegetation area 
//that was estimated for 2005, and so on...

//At this point, it is necessary to establish a limit of the probability surface that corresponds to the
//area predicted to change
var random_cut = random.gte(0.912963)// 2005 = 0.912963  2010 = 0.833352 2015 = 0.760745 2020 = 0.712883

//calculating the amount of area predicted to change by cutting the random susceptibility surface
var transitionMatrix = random_cut.reduceRegion({
  reducer: ee.Reducer.frequencyHistogram(), 
  geometry: roi,
  maxPixels: 3026796830,
  scale: 30,
  bestEffort: false
});
print('transitionMatrix - random_cut', transitionMatrix); 

////////////////////spatialising predicted land use changes////////////////////
//reclassifying the result of the susceptibility surface cut
var de = [0, 1]; 

var para = [7, 10]; 

// performs the reclassification
var predicted_changes_ = random_cut.remap({
  from: de,
  to: para,
  defaultValue: 0,
  bandName: 'random'
}).reproject('EPSG:4326', null, 30);

//multiplying the predicted changes with the 2000 land use map
var predicted_changes_= land_use_t1.multiply(predicted_changes_)
//var predicted_changes_mask = predicted_changes_.updateMask(land_use_t1)
Map.addLayer(predicted_changes_)

var transitionMatrix = predicted_changes_.reduceRegion({
  reducer: ee.Reducer.frequencyHistogram(), 
  geometry: roi,
  maxPixels: 3026796830,
  scale: 30,
  bestEffort: false
});
print('transitionMatrix - fraction pixel', transitionMatrix); 

//export the image to google drive
Export.image.toDrive({
  image: predicted_changes_, 
  description:'randon_05_rs',
  folder:'amazon', 
  region :roi, 
  scale:30, 
  crs:'EPSG:4326', 
  maxPixels:1e13
});
